package com.deeparishi.javaapp.corejavaconcepts.designpatterns.creational.factory;

public class FactoryPattern {

    public static void main(String[] args) {

        Notification emailNotification = NotificationFactory.createNotification("Email").orElseThrow();
        emailNotification.notifyUser();


        Notification smsNotification = NotificationFactory.createNotification("sms").orElseThrow();
        smsNotification.notifyUser();


        Notification pushNotification = NotificationFactory.createNotification("push").orElseThrow();
        pushNotification.notifyUser();
    }
}

/*

    What is the Factory Pattern?
    A Factory Pattern is used to create objects without exposing the object creation logic to the client.
    Instead of using the new keyword, we use a special method (a factory method) to create objects dynamically.


                    Summary of Factory Pattern
    ðŸ”¹ What? A pattern to create objects without exposing object creation logic.
    ðŸ”¹ Why? It improves maintainability, reduces coupling, and centralizes object creation.
    ðŸ”¹ When? When you have multiple object types and need a flexible way to instantiate them.
    ðŸ”¹ Where? Used in frameworks like Spring, JDBC, Logging systems, and UI components.
    ðŸ”¹ How? Use a factory method to return an instance based on input conditions.


            Key Benefits of Using Factory Pattern in This Example
    âœ” The NotificationFactory class controls object creation, so the main code (main method) does not directly use new.
    âœ” If a new notification type (e.g., WhatsApp Notification) is needed, we only modify the factory, not client code.
    âœ” Client code remains clean and loosely coupled.

 */